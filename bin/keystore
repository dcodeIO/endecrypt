#!/usr/bin/env node
/*
 Copyright 2013 Daniel Wirtz <dcode@dcode.io>

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
var path = require("path"),
    fs = require("fs"),
    util = require("util"),
    endecrypt = require(path.join(__dirname, "..", "src", "endecrypt.js")),
    PSON = require("pson"),
    ascli = require("ascli").app("keystore"),
    pkg = require(path.join(__dirname, "..", "package.json"));

// Banner and setup
process.stderr.write(ascli("keystore".green.bold, "password-based encryption for node.js "+("v"+pkg.version).gray.bold));
endecrypt.cli.setRawMode(true);

// Ask for passphrase if necessary
var passphrase = typeof ascli.opt.p === 'string' ? ascli.opt.p : null;
var rounds = typeof ascli.opt.r === 'string' ? parseInt(ascli.opt.r, 10) : endecrypt.DEFAULT_ROUNDS;
if (isNaN(rounds) || rounds < 1) {
    ascli.fail("Invalid number of rounds", 1);
}
function maybeAskForPassphrase(prompt, callback) {
    if (typeof prompt === 'function') {
        callback = prompt;
        prompt = " passphrase: ";
    }
    if (passphrase !== null) {
        process.nextTick(function() {
            callback(passphrase);
        });
    } else {
        endecrypt.cli.passphrase(prompt, function(pp) {
            if (pp === null) {
                process.exit(-1);
            }
            passphrase = pp; // Remember
            callback(pp);
        });
    }
}

// keystore list <storefile>
if (ascli.argv.length == 2 && ascli.argv[0] == "list") {
    var storefile = ascli.argv[1];
    fs.readFile(storefile, function(err, data) {
        if (err) {
            ascli.fail("Failed to open store: "+err.message, 1);
        }
        maybeAskForPassphrase(" passphrase".white.bold+" for "+storefile+" ("+rounds+" rounds): ", function(passphrase) {
            endecrypt.decryptStore(data, passphrase, { rounds: rounds }, function(err, store) {
                if (err) {
                    ascli.fail("Failed to decrypt store: "+err.message, 2);
                }
                var keys = Object.keys(store);
                console.log(("\nStore contains "+keys.length+" top level entries:").white.bold);
                for (var i=0; i<keys.length; i++) {
                    console.log("* ".gray+keys[i]);
                }
                ascli.ok();
            });
        });
    });

// keystore add <infile> <storefile> [-N=key]
} else if (ascli.argv.length == 3 && ascli.argv[0] == "add") {
    var infile = ascli.argv[1],
        storefile = ascli.argv[2];
    
    maybeAskForPassphrase(" passphrase".white.bold+" for "+storefile+" ("+rounds+" rounds): ", function(passphrase) {
        function exec(store) {
            var key = typeof ascli.opt.n === 'string' ? ascli.opt.n : path.basename(infile);
            fs.readFile(infile, function(err, data) {
                if (err) {
                    ascli.fail("Failed to open file: "+err.message, 1);
                }
                store[key] = data;
                endecrypt.encryptStore(store, passphrase, { rounds: rounds }, function(err, data) {
                    if (err) {
                        ascli.fail("Failed to encrypt store: "+err.message, 5);
                    }
                    fs.writeFile(storefile, data, function(err) {
                        if (err) {
                            ascli.fail("Failed to write store: "+err.message, 6);
                        }
                        ascli.ok();
                    });
                });
            });
        }
        
        fs.readFile(storefile, function(err, data) {
            if (err) {
                exec({});
            } else {
                endecrypt.decryptStore(data, passphrase, { rounds: rounds }, function(err, store) {
                    if (err) {
                        ascli.fail("Failed to decrypt store: "+err.message, 2);
                    }
                    if (Object.prototype.toString.call(store) != "[object Object]") {
                        ascli.fail("Failed to read store: Not an object", 3);
                    }
                    exec(store);
                });
            }
        });
    });

// keystore get <key> <storefile>
} else if (ascli.argv.length == 3 && ascli.argv[0] == "get") {
    var key = ascli.argv[1],
        storefile = ascli.argv[2];
    fs.readFile(storefile, function(err, data) {
        if (err) {
            ascli.fail("Failed to open store: "+err.message, 1);
        }
        maybeAskForPassphrase(" passphrase".white.bold+" for "+storefile+" ("+rounds+" rounds): ", function(passphrase) {
            endecrypt.decryptStore(data, passphrase, { rounds: rounds }, function(err, store) {
                if (err) {
                    ascli.fail("Failed to decrypt store: "+err.message, 2);
                }
                if (Object.prototype.toString.call(store) != "[object Object]") {
                    ascli.fail("Failed to read store: Not an object", 3);
                }
                if (!store.hasOwnProperty(key)) {
                    ascli.fail("No such key", 4);
                }
                process.stdout.write(store[key].toBuffer());
                ascli.ok();
            });
        });
    });

// keystore del <key> <storefile>
} else if (ascli.argv.length == 3 && ascli.argv[0] == "del") {
    var key = ascli.argv[1],
        storefile = ascli.argv[2];
    fs.readFile(storefile, function(err, data) {
        if (err) {
            ascli.fail("Failed to open store: "+err.message, 1);
        }
        maybeAskForPassphrase(" passphrase".white.bold+" for "+storefile+" ("+rounds+" rounds): ", function(passphrase) {
            endecrypt.decryptStore(data, passphrase, { rounds: rounds }, function(err, store) {
                if (err) {
                    ascli.fail("Failed to decrypt store: "+err.message, 2);
                }
                if (Object.prototype.toString.call(store) != "[object Object]") {
                    ascli.fail("Failed to read store: Not an object", 3);
                }
                if (!store.hasOwnProperty(key)) {
                    ascli.fail("No such key", 4);
                }
                delete store[key];
                endecrypt.encryptStore(store, passphrase, { rounds: rounds }, function(err, data) {
                    if (err) {
                        ascli.fail("Failed to encrypt store: "+err.message, 5);
                    }
                    fs.writeFile(storefile, data, function(err) {
                        if (err) {
                            ascli.fail("Failed to write store: "+err.message, 6);
                        }
                        ascli.ok();
                    });
                });
            });
        });
    });
    
// Usage
} else {
    process.stderr.write([
        " Usage:".white.bold+" keystore list|add|get|del ...",
        "",
        " list".white.bold+" <storefile>                        Lists all entries in storefile",
        " add ".white.bold+" <infile> [-n=ALTNAME] <storefile>  Adds an entry to storefile",
        " get ".white.bold+" <name> <storefile>                 Reads an entry from storefile",
        " del ".white.bold+" <name> <storefile>                 Deletes an entry from storefile",
        "",
        " Global options:".white.bold,
        " -r=ROUNDS                               Number of PBKDF2 rounds to perform",
        " -p=PASSPHRASE                           Passphrase to use"
    ].join("\n")+"\n");
}
